// Kyle G Gayliyev 
// Homework 6
// Fall 2023

// This file verifies a 2-bit integer multiplier over Q
// Lex order RTTO.It means that GATE OUTPUTS
// are the leading term and leading coeff is 1.
// RTTO: Reverse Topological Term Order.
// Ring R = 0..., 0 = field of characteristic 0 = Q

//pr1, sec "g" solution:
ring R = 0, (z_0, z_1, s_5, s_4, s_3, s_2, s_1, s_0, r_0, e_3, e_2, e_1, e_0, a_0, a_1, b_0, b_1), lp;

// Under non RTTO order, e.g. deglex, J + J0 will NOT be a GB itself!
// Deglex = degree lex
//ring r = 0, (a_0, a_1, b_0, b_1, e_0, e_1, e_2, e_3, r_0, s_0, s_1, s_2, s_3, s_4, s_5, z_0, z_1), Dp;

poly f_spec = (z_0 + 2*z_1) - 2*a_0*a_1*b_0*b_1 + 4*a_0*a_1*b_1 - a_0*b_0 - 2*a_0*b_1 + 4*a_1*b_0*b_1 - 2*a_1*b_0 - 3*a_1*b_1; //spec


// XOR
poly f4 = z_0 - s_0 - e_0 + 2*s_0*e_0;
poly f5 = z_1 - r_0 - e_0 + 2*r_0*e_0;
poly f6 = r_0 - e_1 - s_5 + 2*e_1*s_5;

// AND
poly f7 = e_0 - s_1*e_2;
poly f8 = e_1 - s_2*e_2;

//XOR
poly f9 = e_2 - e_3 - s_4 + 2*e_3*s_4;

// AND
poly f10 = e_3 - b_0*s_3;
poly f11 = s_0 - a_0*b_0;
poly f12 = s_1 - a_1*b_1;
poly f13 = s_2 - a_1*b_0;

//OR
poly f14 = s_3 - b_0 - a_0 + a_0*b_0;

//NOT
poly f15 = s_4 + b_0 - 1;

// AND
poly f16 = s_5 - a_0*b_1;


ideal J = f4, f5, f6, f7, f8, f9, f10, f11, f12, f13, f14, f15, f16;

//pr1 sec "d" solution:
ideal J0 = a_0^2 - a_0, a_1^2 - a_1, b_0^2 - b_0, b_1^2 - b_1;
printf("J0 = the ideal of all bit-level vanishing polynomials:");
J0;
printf("");

//pr1 sec "f" and "h" solution:
// J+J0 = <f4, f5, f6, f7, f8, f9, 
// f10, f11, f12, f13, f14, f15, 
// f16, a_0^2 - a_0, a_1^2 - a_1, 
// b_0^2 - b_0, b_1^2 - b_1>;
printf("J+J0 = minimal GB even for integer arithmetic circuits");
printf("J + J0 is:");
J+J0;
printf("");

printf("non reduced but minimal GB(J+J0) is:");
groebner(J+J0);
printf("");

//pr1 sec "i" solution:
printf("Reduced minimal GB, Greduced=groebner(Gmin) is:");
option(noredSB);
ideal Gred= groebner(groebner(J+J0));
Gred;
printf("");

//pr1 sec "k" and "e" solution:
printf("Verification: f_spec mod (J+J0) should be 0.");
printf("The result of the reduce(f_spec, J+J0) is : ");
reduce(f_spec, J+J0);


